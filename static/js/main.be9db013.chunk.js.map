{"version":3,"sources":["components/CitySelector.js","components/WeatherCard.js","components/WeatherList.js","hooks/UseFetch.js","apis/config.js","App.js","reportWebVitals.js","index.js"],"names":["CitySelector","onSearch","currentSearch","useState","city","setCity","Row","Col","href","src","className","xs","FormControl","placeholder","onChange","e","target","value","Button","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","WeatherCard","dt","temp_min","temp_max","main","icon","date","Date","Card","Img","variant","Body","Title","toLocaleDateString","toLocaleTimeString","WeatherList","weathers","map","weather","temp_main","UseFetch","initialUrl","data","setData","error","SetError","isLoading","SetIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","API_KEY","API_BASE_URL","App","Container","lat","lon","Spinner","animation","role","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be9db013.chunk.js","sourcesContent":["//In this component will get the city value from the user input then place it on the API URL \r\n//to get the resulet based on the city name \r\n\r\nimport React, {useState} from 'react';\r\nimport {Row, Col, FormControl, Button} from 'react-bootstrap';\r\nimport '../App.css';\r\nconst CitySelector = ({onSearch,currentSearch}) => {\r\n\r\n    const [city, setCity] = useState('');\r\n\r\n    return (\r\n      <>\r\n      <Row>\r\n          <Col>\r\n          <a href=\"/\">\r\n    <img src=\"Logo.jpg\" className=\"logo\"/></a>\r\n          </Col>\r\n          </Row>\r\n        <Row>\r\n            <Col>\r\n              <h1 className=\"Search\" >SERCH FOR YOUR CITY</h1>\r\n            </Col>\r\n        </Row>\r\n        \r\n        <Row>\r\n            <Col xs={4} >\r\n              <FormControl placeholder=\"Enter City\" onChange={(e) => setCity(e.target.value)}  value={city}  className=\"SearchBox\"/>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n\t    <Button onClick={() => {navigator.geolocation.getCurrentPosition((position) => currentSearch(position.coords.latitude,position.coords.longitude))}}>Current Location</Button>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n              <Button onClick={() => onSearch(city)} className=\"Button\"> Check Weather </Button>\r\n            </Col>\r\n        </Row>\r\n        \r\n      </> \r\n    );\r\n};\r\n\r\nexport default CitySelector;","//This component is to represent the data by cards\r\n\r\nimport React from 'react';\r\nimport {Card} from 'react-bootstrap';\r\nimport \"../App.css\";\r\nconst WeatherCard = ({dt, temp_min, temp_max, main, icon}) => {\r\n    const date = new Date(dt);\r\n    return (\r\n     <Card className=\"Cards\" >\r\n        <Card.Img variant=\"top\" className=\"image\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\r\n        <Card.Body className=\"cardbody\">\r\n            <Card.Title className=\"cardtitle\">{main}</Card.Title>\r\n            <p>\r\n                {date.toLocaleDateString()} - {date.toLocaleTimeString()}\r\n            </p>\r\n            \r\n            <p>  Min: {temp_min}  </p>\r\n            <p>  Max: {temp_max} </p>\r\n          \r\n        </Card.Body>\r\n     </Card>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;","//This component is to list the weather data based on the array lenght after the pressing the search button\r\n\r\nimport React from 'react';\r\nimport {Col, Row} from 'react-bootstrap';\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst WeatherList = ({weathers}) => {\r\n \r\n  return (\r\n  \r\n     <Row>\r\n         {weathers.map(({dt, main, weather}) => (\r\n            <Col key={dt}>\r\n              <WeatherCard temp_max={main.temp_max} temp_min={main.temp_main} dt={dt * 1000} main={weather[0].main} icon={weather[0].icon} />\r\n            </Col>\r\n         ))}\r\n     </Row>\r\n\r\n  )\r\n}\r\n\r\nexport default WeatherList;","//we use this customed hook to be able fetch the data from the API\r\n//To return the data and the loading \r\n//we return setUrl because we need to use it inside the city selection \r\n\r\nimport {useState, useEffect} from 'react';\r\n\r\nconst UseFetch = (initialUrl) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [error, SetError] = useState(null);\r\n    const [isLoading, SetIsLoading] = useState(null);\r\n    const [url, setUrl] = useState(initialUrl);\r\n\r\n    useEffect(() => {\r\n        if(!url) return;\r\n        SetIsLoading(true);\r\n        setData(null);\r\n        SetError(null);\r\n\r\n        fetch(url).then((response) => response.json())\r\n        .then((data) => {\r\n            SetIsLoading(false);\r\n            if(data.cod >= 400) {\r\n                SetError(data.message);\r\n                return;\r\n            }\r\n            setData(data);\r\n        })\r\n        .catch((error) => {\r\n            SetIsLoading(false);\r\n            SetError(error);\r\n        });\r\n    }, [url]);\r\n\r\n    return {data, error, isLoading, setUrl};\r\n};\r\n\r\nexport default UseFetch;","//We store the API URL and key here \r\nexport const API_KEY = ['785cfc7569ba4c5f9bd563c0bd3a1386'];\r\nexport const API_BASE_URL = 'http://api.openweathermap.org/';","import React from 'react';\nimport CitySelector from './components/CitySelector';\n\nimport WeatherList from './components/WeatherList';\nimport UseFetch from './hooks/UseFetch';\nimport {API_KEY, API_BASE_URL} from './apis/config';\nimport './App.css';\nimport {Container, Spinner} from 'react-bootstrap';\n\nimport About from './components/About';\n\nconst App = () => {\n\n  const {data, error, isLoading, setUrl} = UseFetch();\n   \n  //We get all the data by this function then how many lists we have\n  const getContent = () => {\n   if(error) return <h2>Error:  {error}</h2>\n   if(!data && isLoading) return <Spinner animation=\"border\" role=\"status\"> <spane className=\"sr-only\">Loading...</spane> </Spinner>\n   if(!data) return null;\n   return <WeatherList weathers={data.list} />\n\n  };\n\n  return ( \n\n    <Container className=\"App\">\n   \n      <CitySelector onSearch={(city) => setUrl(`${API_BASE_URL}/data/2.5/forecast?q=${city}&appid=${API_KEY}`)}\n\t currentSearch={(lat,lon) => setUrl(`${API_BASE_URL}/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`)} />\n      {getContent()}\n    </Container>\n\n  );\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nreportWebVitals();\r\n"],"sourceRoot":""}